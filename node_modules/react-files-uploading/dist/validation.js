"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getErrorValidation = exports.isMaxNumberValid = exports.isAcceptTypeValid = exports.isMaxFileSizeValid = void 0;
var constants_1 = require("./constants");
var isMaxFileSizeValid = function (fileSize, maxFileSize) {
    return maxFileSize ? fileSize <= maxFileSize : true;
};
exports.isMaxFileSizeValid = isMaxFileSizeValid;
var isAcceptTypeValid = function (acceptType, fileName) {
    if (acceptType && acceptType.length > 0) {
        var type_1 = fileName.split('.').pop() || '';
        if (acceptType.findIndex(function (item) { return item.toLowerCase() === type_1.toLowerCase(); }) < 0)
            return false;
    }
    return true;
};
exports.isAcceptTypeValid = isAcceptTypeValid;
var isMaxNumberValid = function (totalNumber, maxNumber, keyUpdate) {
    if (maxNumber !== 0 && !maxNumber)
        return true;
    if (keyUpdate === constants_1.DEFAULT_NULL_INDEX) {
        if (totalNumber <= maxNumber)
            return true;
    }
    else if (totalNumber <= maxNumber + 1)
        return true;
    return false;
};
exports.isMaxNumberValid = isMaxNumberValid;
var getErrorValidation = function (_a) {
    var fileList = _a.fileList, value = _a.value, maxNumber = _a.maxNumber, keyUpdate = _a.keyUpdate, acceptType = _a.acceptType, maxFileSize = _a.maxFileSize;
    var newErrors = {};
    if (!(0, exports.isMaxNumberValid)(fileList.length + value.length, maxNumber, keyUpdate)) {
        newErrors.maxNumber = true;
    }
    else {
        for (var i = 0; i < fileList.length; i += 1) {
            var file = fileList[i].file;
            if (!file)
                continue;
            if (!(0, exports.isAcceptTypeValid)(acceptType, file.name)) {
                newErrors.acceptType = true;
                break;
            }
            if (!(0, exports.isMaxFileSizeValid)(file.size, maxFileSize)) {
                newErrors.maxFileSize = true;
                break;
            }
        }
    }
    if (Object.values(newErrors).find(Boolean))
        return newErrors;
    return null;
};
exports.getErrorValidation = getErrorValidation;
