/// <reference types="react" />
import React, { DetailedHTMLProps, ReactElement, JSXElementConstructor, MouseEventHandler, MouseEvent } from 'react';
import { UseFormReturn, ControllerRenderProps, UseFormProps, Path } from 'react-hook-form';
import { TypographyProps, BoxProps, GridProps, FormControlLabelProps, FormControlProps, ImageListProps, PaperProps, TextFieldProps, SelectProps, AutocompleteProps, ChipProps, CheckboxProps, RadioProps, SwitchProps, ButtonBaseProps, RatingProps } from '@mui/material';
import { DatePickerProps, DateTimePickerProps, TimePickerProps } from '@mui/lab';
import * as yup_lib_object from 'yup/lib/object';
import * as yup from 'yup';
import { EditableProps } from 'slate-react/dist/components/editable';

interface AutocompleteOptionConfig {
    value?: string;
    label: string;
}

interface Option<T> {
    key: string;
    value: T;
    label: string;
}
interface OptionConfig {
    key: string;
    value?: string;
    label: string;
}

declare function getFormSchema(fields: Array<FieldProp>): yup_lib_object.RequiredObjectSchema<{}, yup_lib_object.AnyObject, yup_lib_object.TypeOfShape<{}>>;
declare function getFieldSchema<T extends keyof SchemaType>(schemaType?: T, validations?: Array<Validation>, label?: string): SchemaType[T];
declare type SchemaType = {
    string: yup.StringSchema;
    number: yup.NumberSchema;
    boolean: yup.BooleanSchema;
    date: yup.DateSchema;
    array: yup.ArraySchema<yup.AnySchema>;
    mixed: yup.AnySchema;
};

declare const validation_d_getFormSchema: typeof getFormSchema;
declare const validation_d_getFieldSchema: typeof getFieldSchema;
type validation_d_SchemaType = SchemaType;
declare namespace validation_d {
  export {
    validation_d_getFormSchema as getFormSchema,
    validation_d_getFieldSchema as getFieldSchema,
    validation_d_SchemaType as SchemaType,
  };
}

interface TitleProps {
    title?: string;
    titleProps?: TypographyProps;
    titleContainerProps?: BoxProps;
    titleSuffixComponent?: React.ReactNode;
    titleSuffix?: string;
    titleSuffixProps?: DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;
}

interface CommonFieldProps<TComp extends keyof ComponentType<TOption>, TOption = unknown> {
    id?: string;
    /** Form attribute that controls input and is modified by input.
     * Also acts as id
     */
    attribute?: string;
    /** Component label for
     *
     * `text-field`,
     *
     * `select`,
     *
     * `autocomplete`,
     *
     * `date-picker`,
     *
     * `date-time-picker`,
     *
     * `time-picker`,
     *
     * `switch`.
     *
     * Can be omitted if label is not required. */
    label?: string;
    /** Title for component. Can be used to describe input or hold a question. */
    title?: TitleProps["title"];
    /** Title props passed to Typography component wrapping title */
    titleProps?: TitleProps["titleProps"];
    /** Title suffix component to append to title. Supercedes titleSuffix */
    titleSuffixComponent?: TitleProps["titleSuffixComponent"];
    /** Title suffix to append to title. Could be used to denote required fields */
    titleSuffix?: TitleProps["titleSuffix"];
    /** Title suffix props passed to span component wrapping title suffix */
    titleSuffixProps?: TitleProps["titleSuffixProps"];
    /** Props passed to Box container wrapping the title and titleSuffix */
    titleContainerProps?: TitleProps["titleContainerProps"];
    /** Grid columns that component should take. e.g. { xs: 12 } */
    col?: GridColMap;
    /**
     * One of:
     *
     * `text-field`,
     *
     * `select`,
     *
     * `date-picker`,
     *
     * `date-time-picker`,
     *
     * `time-picker`,
     *
     * `autocomplete`,
     *
     * `chip-group`,
     *
     * `checkbox-group`,
     *
     * `radio-group`,
     *
     * `switch`,
     *
     * `file-upload`,
     *
     * `image-picker`,
     *
     * `rating`,
     *
     * `counter`,
     *
     * `display-text`,
     *
     * `display-image`,
     *
     * `rich-text`,
     *
     * `custom`
     * */
    component: TComp;
    /** Any additional props to pass to the Material UI component */
    props?: ComponentType<TOption>[TComp];
    /** Any additional props to pass to the Material UI Grid item that contains the component */
    containerProps?: GridProps;
    /** If true, hides field */
    hideCondition?: boolean;
    /** One of: `mixed`, `string`, `number`, `date`, `boolean`, `array` */
    validationType?: keyof SchemaType;
    /** These are validation options accepted by `yup` in the form of `[validation, arguments]`.
     * Arguments can be a `string`, `number`, `true`, `regex` or an `array` of such in the order that it is accepted
     * by the `yup` option. For validations that do not require any arguments, set the argument
     * to `true`. */
    validations?: Array<Validation>;
    /** Function that accepts the props `(field, ref)` and returns a node */
    customComponent?: (field: unknown, methods: UseFormReturn<any>, hookField: ControllerRenderProps) => ReactElement<any, string | JSXElementConstructor<any>>;
    index?: string | number;
    idPrefix?: string;
}
interface MultiOptionFieldProps<TOption> {
    /** Required for `select`, `checkbox-group` and `radio-group` */
    options: Array<TOption>;
    /**
     * Only for `select`, `checkbox-group` and `radio-group`
     *
     * Required if options is an array of objects. Examples:
     *
     * `{ key: optionKey, value?: optionKey, label: optionKey }`
     * */
    optionConfig?: OptionConfig;
    /** Only for `select`, `checkbox-group` and `radio-group`
     *
     * If true, randomises option order on each render */
    randomizeOptions?: boolean;
    /** Only for `checkbox-group`.
     *
     * If true, multiple options will be selectible */
    multiple?: boolean;
    /**
     * Only for `checkbox-group`, `radio-group`.
     *
     * Any additional props to pass to Material UI's FormControlLabel that wraps the label.
     * */
    labelProps?: Partial<FormControlLabelProps>;
    /**
     * Only for `checkbox-group`, `radio-group`.
     *
     * Any additional props to pass to Material UI's FormGroup that wraps the
     * individual components within the group.
     * */
    groupContainerProps?: FormControlProps;
}
interface AutocompleteFieldProps<TOption> {
    options: Array<TOption>;
    /**
     * Required if options is an array of objects. Examples:
     *
     * `{ value?: optionKey, label: optionKey }`
     *
     * Leave value undefined for entire object
     * */
    optionConfig?: AutocompleteOptionConfig;
    /** If true, randomises option order on each render */
    randomizeOptions?: boolean;
    /** If true, selected options will be sortable via drag and drop */
    sortable?: boolean;
}
interface ChipGroupFieldProps<TOption> {
    options: Array<TOption>;
    /** Required if options is an array of objects. */
    optionConfig?: OptionConfig;
    /** If true, randomises option order on each render */
    randomizeOptions?: boolean;
    /** If true, multiple options will be selectible */
    multiple?: boolean;
    /** Any additional props to pass to span that wraps the label. */
    labelProps?: DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;
    /** Any additional props to pass to Material UI's FormGroup that wraps the
     * individual components within the group.
     * */
    groupContainerProps?: FormControlProps;
}
interface SwitchFieldProps {
    /** Options for switch in the form of `[offValue, onValue]`. Values must be
     * `string`, `number` or `boolean`.
     */
    options?: [string | number | boolean, string | number | boolean];
    /**
     * Any additional props to pass to Material UI's FormControlLabel that wraps the label.
     * */
    labelProps?: Partial<FormControlLabelProps>;
}
interface DateTimeFieldProps {
    /** If true, will use the Keyboard equivalent components of the pickers */
    keyboard?: boolean;
}
interface FileUploadFieldProps {
    /**
     * Concatenated value will be passed as `accept` prop to `input`. Default:
     *
     * `[".pdf", ".doc", ".docx", ".xml", "application/msword",
     * "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
     * ".xls", ".xlsx", ".csv", "image/*", "audio/*", "video/*"]`
     * */
    acceptTypes?: string | Array<string>;
    /** Max size of each uploaded file. */
    maxSizeMb?: number;
    fileType?: FileType;
    /** If file type is image, you may specify the urls of the existing images here. */
    imageUrls?: Array<string>;
    /** Size of image preview in the form `[width, height]`.
     * imageSize supercedes aspectRatio. */
    imageSize?: Array<[number, number]>;
    /** Aspect ratio of image preview in the form
     * `[width, height]`. imageSize supercedes aspectRatio. */
    aspectRatio?: Array<[number, number]>;
    /** If true, allows multiple file uploads */
    multiple?: boolean;
}
interface StandardDisplayTextProps extends CommonFieldProps<"display-text"> {
}
interface StandardDisplayImageProps extends CommonFieldProps<"display-image">, DisplayFieldProps {
}
interface StandardCustomProps extends CommonFieldProps<"custom"> {
}
interface DisplayFieldProps {
    /** Source of image. */
    src: string;
    /**
     * Alt passed to `img` node.
     * */
    alt?: string;
}
interface ImagePickerFieldProps {
    /** This should contain an array of objects
     * with attributes `src`, `label` and `alt` (defaults to `label`) */
    images: Array<ImagePickerObject>;
    /**
     * Number of columns in image list.
     *
     * This should be an object with breakpoints `xs`, `sm`, `md`, `lg`, `xl` as keys.
     *
     * Columns for each breakpoint default to the previous breakpoint is not specified
     * */
    imageCols?: ImageColMap;
    /** Number of lines allowed for label */
    labelLines?: number;
    /** Number of lines allowed for sublabel */
    subLabelLines?: number;
    /** Aspect ratio of image preview in the form `[width, height]`. */
    aspectRatio?: Array<[number, number]>;
    /** If true, multiple options will be selectible */
    multiple?: boolean;
    /** Any additional props to pass to the Box component that wraps the img. */
    imageProps?: BoxProps;
    /** Any additional props to pass to the Typography component that wraps the label. */
    labelProps?: TypographyProps;
    /** Any additional props to pass to the Typography component that wraps the sublabel. */
    subLabelProps?: TypographyProps;
    /** Any additional props to pass to the ImageList component that wraps the individual components within the group. */
    groupContainerProps?: ImageListProps;
    getValueKey?: (value: ImagePickerObject) => string;
    getOptionKey?: (option: ImagePickerObject) => string;
}
interface RatingFieldProps {
    iconColor?: string;
}
interface CounterFieldProps {
    /** Minimum value allowed */
    inputMin?: number;
    /** Maximum value allowed */
    inputMax?: number;
    /** Counter font size */
    fontSize?: number;
}
interface RichTextFieldProps {
    groupContainerProps?: PaperProps;
    /** Props to pass to the Slate Editable component */
    editableProps?: EditableProps;
}
interface GridColMap {
    xs?: number | "auto" | true;
    sm?: number | "auto" | true;
    md?: number | "auto" | true;
    lg?: number | "auto" | true;
    xl?: number | "auto" | true;
}
interface ImageColMap {
    xs?: number;
    sm?: number;
    md?: number;
    lg?: number;
    xl?: number;
}
declare const ValidationMethod: {
    readonly Required: "required";
    readonly Length: "length";
    readonly Min: "min";
    readonly Max: "max";
    readonly Matches: "matches";
    readonly Email: "email";
    readonly Url: "url";
    readonly Uuid: "uuid";
    readonly LessThan: "lessThan";
    readonly MoreThan: "moreThan";
    readonly Positive: "positive";
    readonly Negative: "negative";
    readonly Integer: "integer";
    readonly OneOf: "oneOf";
    readonly NotOneOf: "notOneOf";
    readonly Test: "test";
    readonly When: "when";
};
declare type ValidationMethod = typeof ValidationMethod[keyof typeof ValidationMethod];
declare type Validation = [
    ValidationMethod,
    true | string | number | Date | RegExp | Array<any>
];
interface ImagePickerObject {
    src: string;
    label: string;
    subLabel?: string;
    alt?: string;
    customComponent: React.ReactNode;
}
declare const FileType: {
    readonly File: "file";
    readonly Image: "image";
    readonly Audio: "audio";
    readonly Video: "video";
};
declare type FileType = typeof FileType[keyof typeof FileType];
declare type ComponentType<TOption = unknown> = {
    "text-field": Partial<TextFieldProps>;
    select: Partial<SelectProps>;
    "date-picker": Partial<DatePickerProps<Date>>;
    "date-time-picker": Partial<DateTimePickerProps<Date>>;
    "time-picker": Partial<TimePickerProps<Date>>;
    autocomplete: Partial<AutocompleteProps<TOption, true, true, true>> | Partial<AutocompleteProps<TOption, false, true, true>>;
    "chip-group": Partial<ChipProps> & {
        onClick?: (option: Option<TOption>, value: TOption | Array<TOption>) => MouseEventHandler;
    };
    "checkbox-group": Partial<CheckboxProps>;
    "radio-group": Partial<RadioProps>;
    switch: Partial<SwitchProps>;
    "file-upload": Partial<DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>>;
    "image-picker": Partial<ButtonBaseProps<"div", {
        component: "div";
    }> & {
        onClick?: (option: ImagePickerObject, value: ImagePickerObject | Array<ImagePickerObject>) => (event: MouseEvent) => void;
    }>;
    rating: Partial<RatingProps>;
    counter: Partial<BoxProps> & {
        disabled?: boolean;
    };
    "display-text": undefined;
    "display-image": Partial<DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>>;
    "rich-text": Partial<EditableProps>;
    custom: any;
};

interface StandardAutocompleteProps<TOption> extends CommonFieldProps<"autocomplete", TOption>, AutocompleteFieldProps<TOption> {
    attribute: Required<CommonFieldProps<"autocomplete", TOption>>["attribute"];
}
declare function StandardAutocomplete<TOption>(props: {
    field: StandardAutocompleteProps<TOption>;
    methods: UseFormReturn;
    hideTitle?: boolean;
}): JSX.Element;

interface StandardCheckboxGroupProps<TOption> extends CommonFieldProps<"checkbox-group", TOption> {
    attribute: Required<CommonFieldProps<"checkbox-group", TOption>>["attribute"];
    options: MultiOptionFieldProps<TOption>["options"];
    optionConfig?: MultiOptionFieldProps<TOption>["optionConfig"];
    randomizeOptions?: MultiOptionFieldProps<TOption>["randomizeOptions"];
    multiple?: MultiOptionFieldProps<TOption>["multiple"];
    labelProps?: MultiOptionFieldProps<TOption>["labelProps"];
    groupContainerProps?: MultiOptionFieldProps<TOption>["groupContainerProps"];
}
declare function StandardCheckboxGroup<TOption>(props: {
    field: StandardCheckboxGroupProps<TOption>;
    methods: UseFormReturn;
    hideTitle?: boolean;
}): JSX.Element;

interface StandardChipGroupProps<TOption> extends CommonFieldProps<"chip-group", TOption>, ChipGroupFieldProps<TOption> {
    attribute: Required<CommonFieldProps<"chip-group", TOption>>["attribute"];
}
declare function StandardChipGroup<TOption>(props: {
    field: StandardChipGroupProps<TOption>;
    methods: UseFormReturn;
    hideTitle?: boolean;
}): JSX.Element;

interface StandardCounterProps extends CommonFieldProps<"counter">, CounterFieldProps {
    attribute: Required<CommonFieldProps<"counter">>["attribute"];
}
declare function StandardCounter(props: {
    field: StandardCounterProps;
    methods: UseFormReturn;
    hideTitle?: boolean;
}): JSX.Element;

interface StandardDatePickerProps extends CommonFieldProps<"date-picker">, DateTimeFieldProps {
    attribute: Required<CommonFieldProps<"date-picker">>["attribute"];
}
declare function StandardDatePicker(props: {
    field: StandardDatePickerProps;
    methods: UseFormReturn;
    hideTitle?: boolean;
}): JSX.Element;

interface StandardDateTimePickerProps extends CommonFieldProps<"date-time-picker">, DateTimeFieldProps {
    attribute: Required<CommonFieldProps<"date-time-picker">>["attribute"];
}
declare function StandardDateTimePicker(props: {
    field: StandardDateTimePickerProps;
    methods: UseFormReturn;
    hideTitle?: boolean;
}): JSX.Element;

interface StandardEditorProps extends CommonFieldProps<"rich-text">, RichTextFieldProps {
    attribute: Required<CommonFieldProps<"rich-text">>["attribute"];
}
declare function StandardEditor(props: {
    field: StandardEditorProps;
    methods: UseFormReturn;
}): JSX.Element;

interface StandardFileUploadProps extends CommonFieldProps<"file-upload">, FileUploadFieldProps {
    attribute: Required<CommonFieldProps<"file-upload">>["attribute"];
}
declare function StandardFileUpload(props: {
    field: StandardFileUploadProps;
    methods: UseFormReturn;
    hideTitle?: boolean;
}): JSX.Element;

interface StandardImagePickerProps extends CommonFieldProps<"image-picker">, ImagePickerFieldProps {
    attribute: Required<CommonFieldProps<"image-picker">>["attribute"];
}
declare function StandardImagePicker(props: {
    field: StandardImagePickerProps;
    methods: UseFormReturn;
    hideTitle?: boolean;
}): JSX.Element;

interface StandardRadioGroupProps<TOption> extends CommonFieldProps<"radio-group", TOption> {
    attribute: Required<CommonFieldProps<"radio-group", TOption>>["attribute"];
    options: MultiOptionFieldProps<TOption>["options"];
    optionConfig?: MultiOptionFieldProps<TOption>["optionConfig"];
    randomizeOptions?: MultiOptionFieldProps<TOption>["randomizeOptions"];
    labelProps?: MultiOptionFieldProps<TOption>["labelProps"];
    groupContainerProps?: MultiOptionFieldProps<TOption>["groupContainerProps"];
}
declare function StandardRadioGroup<TOption>(props: {
    field: StandardRadioGroupProps<TOption>;
    methods: UseFormReturn;
    hideTitle?: boolean;
}): JSX.Element;

interface StandardRatingProps extends CommonFieldProps<"rating">, RatingFieldProps {
    attribute: Required<CommonFieldProps<"rating">>["attribute"];
}
declare function StandardRating(props: {
    field: StandardRatingProps;
    methods: UseFormReturn;
    hideTitle?: boolean;
}): JSX.Element;

interface StandardSelectProps<TOption> extends CommonFieldProps<"select", TOption> {
    attribute: Required<CommonFieldProps<"select", TOption>>["attribute"];
    options: MultiOptionFieldProps<TOption>["options"];
    optionConfig?: MultiOptionFieldProps<TOption>["optionConfig"];
    randomizeOptions?: MultiOptionFieldProps<TOption>["randomizeOptions"];
}
declare function StandardSelect<TOption>(props: {
    field: StandardSelectProps<TOption>;
    methods: UseFormReturn;
    hideTitle?: boolean;
}): JSX.Element;

interface StandardSwitchProps extends CommonFieldProps<"switch">, SwitchFieldProps {
    attribute: Required<CommonFieldProps<"switch">>["attribute"];
    label: Required<CommonFieldProps<"switch">>["label"];
}
declare function StandardSwitch(props: {
    field: StandardSwitchProps;
    methods: UseFormReturn;
    hideTitle?: boolean;
}): JSX.Element;

interface StandardTextFieldProps extends CommonFieldProps<"text-field"> {
    attribute: Required<CommonFieldProps<"text-field">>["attribute"];
}
declare function StandardTextField(props: {
    field: StandardTextFieldProps;
    methods: UseFormReturn;
    hideTitle?: boolean;
}): JSX.Element;

interface StandardTimePickerProps extends CommonFieldProps<"time-picker">, DateTimeFieldProps {
    attribute: Required<CommonFieldProps<"time-picker">>["attribute"];
}
declare function StandardTimePicker(props: {
    field: StandardTimePickerProps;
    methods: UseFormReturn;
    hideTitle?: boolean;
}): JSX.Element;

declare type FieldProp = StandardAutocompleteProps<any> | StandardCheckboxGroupProps<any> | StandardChipGroupProps<any> | StandardCounterProps | StandardDatePickerProps | StandardDateTimePickerProps | StandardEditorProps | StandardFileUploadProps | StandardImagePickerProps | StandardRadioGroupProps<any> | StandardRatingProps | StandardSelectProps<any> | StandardSwitchProps | StandardTextFieldProps | StandardTimePickerProps | StandardDisplayTextProps | StandardDisplayImageProps | StandardCustomProps;
interface Error<T> {
    attribute: Path<T>;
    type: string;
    message: string;
}
interface FormBuilderProps<TForm> {
    fields: Array<FieldProp>;
    defaultValue: UseFormProps<TForm>["defaultValues"];
    children?: React.ReactNode;
    index?: string | number;
    idPrefix?: string;
    errors?: Array<Error<TForm>>;
    methods: UseFormReturn<any>;
    sx?: GridProps["sx"];
}
declare function FormBuilder<TForm>(props: FormBuilderProps<TForm>): JSX.Element;

export { FieldProp, FormBuilder, FormBuilderProps, StandardAutocomplete, StandardAutocompleteProps, StandardCheckboxGroup, StandardCheckboxGroupProps, StandardChipGroup, StandardChipGroupProps, StandardCounter, StandardCounterProps, StandardDatePicker, StandardDatePickerProps, StandardDateTimePicker, StandardDateTimePickerProps, StandardEditor, StandardEditorProps, StandardFileUpload, StandardFileUploadProps, StandardImagePicker, StandardImagePickerProps, StandardRadioGroup, StandardRadioGroupProps, StandardRating, StandardRatingProps, StandardSelect, StandardSelectProps, StandardSwitch, StandardSwitchProps, StandardTextField, StandardTextFieldProps, StandardTimePicker, StandardTimePickerProps, Validation, validation_d as validationUtils };
